version: 2
jobs:
  lint:
    docker:
      - image: ubuntu:16.04
        environment:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          LD_LIBRARY_PATH: /usr/local/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/lib32:/usr/lib32
    steps:
      - checkout
      - run: apt-get update && apt-get -y install clang-tidy-5.0 clang-5.0 curl git
      - run: ./scripts/format.sh && ./scripts/error_on_dirty.sh
      - run: ./.circleci/make_test.sh && run-clang-tidy-5.0.py -header-filter "^$(pwd)/(src|valhalla/(baldr|midgard|sif|odin|thor|skadi|tyr|loki|mjolnir)/.*" && ./scripts/error_on_dirty.sh

  build:
    docker:
      - image: ubuntu:16.04
        environment:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          LD_LIBRARY_PATH: /usr/local/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/lib32:/usr/lib32
    steps:
      - checkout
      - run: apt-get update && apt-get -y install git && git submodule sync && git submodule update --init
      - run: bash -c '[[ $(grep -cE "^ " Makefile.am) -eq 0 ]]'
      - restore_cache:
          keys:
            - ccache
      #get dependencies and do the actual build
      - run: .circleci/make_test.sh
      - run: mkdir test/logs && cp test/*.log test/logs
      - store_artifacts:
          path: test/logs
      - save_cache:
          key: ccache
          paths:
            - ~/.ccache
      #fail if tests failed
      - run: (if [ $(cat test/logs/* | grep -cF FAIL) -ne 0 ]; then exit 1; fi)
      #make sure installer works
      - run: make install

  build-cmake:
    docker:
      - image: ubuntu:16.04
        environment:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
          LD_LIBRARY_PATH: /usr/local/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/lib32:/usr/lib32
    steps:
      - checkout
      - run: apt-get update && apt-get -y install git && git submodule sync && git submodule update --init
      - restore_cache:
          keys:
            - ccache
      - run: apt-get install -y software-properties-common
      - run: add-apt-repository -y ppa:valhalla-core/valhalla && apt-get update -y
      - run: apt-get install -y autoconf automake make libtool pkg-config g++ gcc jq lcov locales coreutils protobuf-compiler vim-common libboost-all-dev libcurl4-openssl-dev libgeos-dev libgeos++-dev liblua5.2-dev libprime-server0.6.3-dev libprotobuf-dev libspatialite-dev libsqlite3-dev libsqlite3-mod-spatialite python-all-dev zlib1g-dev liblz4-dev lua5.2 prime-server0.6.3-bin ccache cmake
      - run: cd locales && for loc in $(jq ".posix_locale" *.json | sed -e 's/"//g'); do localedef -i "${loc%.*}" -f "${loc##*.}" "./${loc}" ; done
      - run: mkdir build
      - run: cd build && cmake ..
      - run: make -C build -j4
      - run: make -C build -j2 tests
      - run: make -C build -j4 check
      - save_cache:
          key: ccache
          paths:
            - ~/.ccache
      # - run: make -C build install
workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - build
      - build-cmake
